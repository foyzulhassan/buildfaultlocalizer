RQ1:1

SELECT 
(sum(case when ev_baselinefile_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS baseline1top1percent, 
(sum(case when ev_baselinefile_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS baseline1top5percent,
(sum(case when ev_baselinefile_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS baseline1top10percent,
avg(ev_baselinefile_pos) AS avgbaseline1topN,
(sum(case when ev_baselineissta_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS baseline2top1percent, 
(sum(case when ev_baselineissta_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS baseline2top5percent,
(sum(case when ev_baselineissta_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS baseline2top10percent,
avg(ev_baselineissta) AS avgbaseline2topN,
(sum(case when ev_diffdepboostast_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent,
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboostast_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboostast_pos) AS  avgproposedtopN
FROM travistorrent.gradlebuildfixdatashort where dt_dataset_type="EVAL";

RQ1:2

SELECT 
avg(ev_baselinefile_mrr) as baseline1MRR,
avg(ev_baselinefile_map) as baseline1MAP,
avg(ev_baselinefile_pos) as baseline1TopN,
avg(ev_baselineissta_mrr) as baseline2MRR,
avg(ev_baselineissta_map) as baseline2MAP,
avg(ev_baselineissta_pos) as baseline2TopN,
avg(ev_diffdepboostast_mrr) as proposedMRR,
avg(ev_diffdepboostast_map) as proposedMAP,
avg(ev_diffdepboostast_pos) as proposedTopN
FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL" group by gh_project_name;

RQ1:2

SELECT 
ev_baselinefile_mrr as baseline1MRR
ev_baselineissta_mrr as baseline2MRR,
ev_diffdepboostast_mrr as proposedMRR,
ev_baselinefile_map as baseline1MAP,
ev_baselineissta_map as baseline2MAP,
ev_diffdepboostast_map as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL";

RQ2:
SELECT 
(sum(case when ev_diffdepboostast_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboostast_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboostast_mrr) as proposedMRR,
avg(ev_diffdepboostast_map) as proposedMAP
FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL";


RQ3:

Select 
(sum(case when ev_fulllog_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS baselinetop1, 
(sum(case when ev_fulllog_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS baselinetop5,
(sum(case when ev_fulllog_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS baselinetop10,
avg(ev_fulllog_mrr) as baselineMRR,
avg(ev_fulllog_map) as baselineMAP,
(sum(case when ev_diffdep_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS queryserachtop1, 
(sum(case when ev_diffdep_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS queryserachtop5,
(sum(case when ev_diffdep_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS queryserachtop10,
avg(ev_diffdep_mrr) as queryserachMRR,
avg(ev_diffdep_map) as queryserachMAP,
(sum(case when ev_diffboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS queryboosttop1, 
(sum(case when ev_diffboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS queryboosttop5,
(sum(case when ev_diffboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS queryboosttop10,
avg(ev_diffboost_mrr) as queryboostMRR,
avg(ev_diffboost_map) as queryboostMAP,
(sum(case when ev_fulllogboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS searchboosttop1, 
(sum(case when ev_fulllogboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS searchboosttop5,
(sum(case when ev_fulllogboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS searchboosttop10,
avg(ev_fulllogboost_mrr) as searchboostMRR,
avg(ev_fulllogboost_map) as searchboostMAP,
(sum(case when ev_diffdepboostast_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1, 
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5,
(sum(case when ev_diffdepboostasr_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL";

RQ4:
SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboostast_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboostast_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboostast_mrr) as proposedMRR,
avg(ev_diffdepboostast_map) as proposedMAP
FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL" and f2pass_filelist not like "%.gradle%" and f2pass_filelist like "%.java%";

SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL" and f2pass_filelist like "%.gradle%" and f2pass_filelist not like "%.java%" ;

RQ5:
SELECT avg(ev_diffdepboostast_mrr) as proposedMRR,
avg(ev_diffdepboostast_map) as proposedMAP FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL" and dt_fail_type="TEST FAIL and f2pass_filelist not like "%.gradle%" and f2pass_filelist like "%.java%";" 




SELECT 
(sum(case when ev_diffdepboostasst_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboostast_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboostast_mrr) as proposedMRR,
avg(ev_diffdepboostast_map) as proposedMAP
FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL" and f2pass_filelist like "%.gradle%" and f2pass_filelist like "%.java%"
