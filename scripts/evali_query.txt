SELECT gh_project_name, count(*),
(sum(case when ev_fulllog_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS baselinetop1percent, 
(sum(case when ev_fulllog_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS baselinetop5percent,
(sum(case when ev_fulllog_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS baselinetop10percent,
avg(ev_fulllog_mrr) as baselineMRR,
avg(ev_fulllog_map) as baselineMAP,
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent,
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" group by gh_project_name;

SELECT gh_project_name, count(*),
(sum(case when ev_fulllog_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS baselinetop1percent, 
(sum(case when ev_fulllog_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS baselinetop5percent,
(sum(case when ev_fulllog_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS baselinetop10percent,
avg(ev_fulllog_mrr) as baselineMRR,
avg(ev_fulllog_map) as baselineMAP,
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent,
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" group by gh_project_name;


SELECT gh_project_name, count(*),
avg(ev_fulllog_mrr) as baselineMRR,
avg(ev_fulllog_map) as baselineMAP,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" group by gh_project_name;


RQ2


SELECT gh_project_name, count(*),
(sum(case when ev_reverting_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS reverttop1percent, 
(sum(case when ev_reverting_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS reverttop5percent,
(sum(case when ev_reverting_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS reverttop10percent,
avg(ev_reverting_mrr) as revertMRR,
avg(ev_reverting_map) as revertMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL";


SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboostast_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboostast_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboostast_mrr) as proposedMRR,
avg(ev_diffdepboostast_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL";


RQ3
Select 
(sum(case when ev_fulllog_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS baselinetop1, 
(sum(case when ev_fulllog_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS baselinetop5,
(sum(case when ev_fulllog_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS baselinetop10,
avg(ev_fulllog_mrr) as baselineMRR,
avg(ev_fulllog_map) as baselineMAP,
(sum(case when ev_diffdep_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS queryserachtop1, 
(sum(case when ev_diffdep_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS queryserachtop5,
(sum(case when ev_diffdep_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS queryserachtop10,
avg(ev_diffdep_mrr) as queryserachMRR,
avg(ev_diffdep_map) as queryserachMAP,
(sum(case when ev_diffboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS queryboosttop1, 
(sum(case when ev_diffboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS queryboosttop5,
(sum(case when ev_diffboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS queryboosttop10,
avg(ev_diffboost_mrr) as queryboostMRR,
avg(ev_diffboost_map) as queryboostMAP,
(sum(case when ev_fulllogboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS searchboosttop1, 
(sum(case when ev_fulllogboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS searchboosttop5,
(sum(case when ev_fulllogboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS searchboosttop10,
avg(ev_fulllogboost_mrr) as searchboostMRR,
avg(ev_fulllogboost_map) as searchboostMAP,
(sum(case when ev_diffdepboostast_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1, 
(sum(case when ev_diffdepboostast_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5,
(sum(case when ev_diffdepboostasr_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL";

RQ4:


SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" and f2pass_filelist not like "%.gradle%" and f2pass_filelist like "%.java%";

SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" and f2pass_filelist like "%.gradle%" and f2pass_filelist not like "%.java%" ;




SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" and f2pass_filelist like "%.gradle%" and f2pass_filelist like "%.java%"

RQ5

SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" and f2pass_filelist like "%.gradle%" and not like "%.java%" and dt_fail_type="TEST FAIL;


SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" and f2pass_filelist not like "%.gradle%" and like "%.java%";

SELECT gh_project_name, count(*),
(sum(case when ev_diffdepboost_pos<=1 then 1 else 0 end))/COUNT(*)*100 AS proposedtop1percent, 
(sum(case when ev_diffdepboost_pos<=5 then 1 else 0 end))/COUNT(*)*100 AS proposedtop5percent,
(sum(case when ev_diffdepboost_pos<=10 then 1 else 0 end))/COUNT(*)*100 AS proposedtop10percent,
avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP
FROM travisci.gradlebuildfixdatashort where dt_dataset_type="EVAL" and f2pass_filelist like "%.gradle%" and like "%.java%"

SELECT avg(ev_diffdepboost_mrr) as proposedMRR,
avg(ev_diffdepboost_map) as proposedMAP FROM travistorrent.gradlebuildfixdata where dt_dataset_type="EVAL" and dt_fail_type="TEST FAIL" 